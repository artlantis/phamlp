#summary Description of the options used with Sass.
#labels Phase-Implementation,Phase-Deploy,Featured

= Introduction =

This page describes the options used with Sass.

Options are passed to the Sass parser as name=>value pairs at instantiation; e.g.
{{{
  $sass = new SassParser(array('style'=>'nested'));
}}}


= Details =
*style* (string) Style of the CSS output.<br/>
Available output styles:<br/>
_nested_: Nested is the default Sass style, because it reflects the structure of the document in much the same way Sass does. Each selector and rule has its own line with indentation is based on how deeply the rule is nested. Nested style is very useful when looking at large CSS files for the same reason Sass is useful for making them: it allows you to very easily grasp the structure of the file without actually reading anything.<br/>
_expanded_: Expanded is the typical human-made CSS style, with each selector and property taking up one line. Selectors are not indented; properties are indented within the rules.<br/>
_compact_: Each CSS rule takes up only one line, with every property defined on that line. Nested rules are placed with each other while groups of rules are separated by a blank line.<br/>
_compressed_: Compressed has no whitespace except that necessary to separate selectors and properties. It is intended for production; it's not meant to be human-readable.<br/>
Default = nested

*property_syntax* (string) Forces the document to use one syntax for properties. If the correct syntax isn't used, an error is thrown.
Available property syntaxe:<br/>
_new_: forces thes use of a colon or equals sign after the property name. For example	 color: #0f3 or width = !main_width.<br/>
_old_:  forces the use of a colon before the property name. For example: :color #0f3 or :width = !main_width.<br/>
By default, either syntax is valid.

*cache* (boolean) Whether parsed Sass files should be cached, allowing greater speed.<br/>
Default = true.

*always_update* (boolean) Whether the CSS files should be updated every time, as opposed to only when the template has been modified.
Default = false.

*template_location* (string) Path to the root sass template directory for your application.

*css_location* (string) The path where CSS output should be written to.<br/>
Default = "./css".

*cache_location* (string) The path where the cached sassc files should be written to.<br/>
Default = "./sass-cache".

*load_paths* (array) An array of filesystem paths which should be searched for Sass templates imported with the @import directive.<br/>
Defaults = array("./sass-templates").